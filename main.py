from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import MessageHandler, filters
from graphic_builder import Graphic_builder
from data_manager import Data_manager
import os





eng_texts = [
    ['/helpüôã‚Äç‚ôÇÔ∏è', '/get_graphüìä', '/extra‚öôÔ∏è', '/languageüá∞üáø/üá∫üá≤'],
    ['/creatinine', '/urea_nitrogen', '/total_protein', '/red_blood_cell', '/hemoglobin', '/thrombocytes','/total_cholesterol','/blood_glucose', '/backüîô'],
    ['/ChatGPTü§ñ', '/siteüåê', '/delete_dbüóëÔ∏è', '/backüîô'],
    ['/YES‚úÖ', '/back‚ùå'],
    ["Hi, I'm Qolqanat Bot ü§ó, I am ready to serve you 24/7 ‚è∞! Just don‚Äôt forget to send command  /start‚ùï Send me your  medical results in PDF format..."],
    ['Good üññ you pressed the get_graphüìä button. Please choose what you want to receiveüòÅ:'],
    ['Main menu'],
    ['file: ', ' downloaded'],
    ['Oh i can‚Äôt see any files in my dataüò¢,please send me PDF files!üíÅ‚Äç‚ôÇÔ∏è'],
    ["""$ /get_graph test result graphs.
    /extra Here you can see three main buttons.
    /ChatGPT sends you a link to the ChatGPT
    /site sends you a link to our official site.
    /delete_db deletes all your data in the database
    Send PDF files to get graphs
        """],
    ['Extra functions: '],
    ['Are you sure?: '],
    ['Data deleted!'],
    ['ChatGPT-–ø–µ–Ω —Å”©–π–ª–µ—Å—É “Ø—à—ñ–Ω [–º—ã–Ω–∞ –∂–µ—Ä–¥—ñ](https://platform.openai.com/playground) –±–∞—Å—ã“£—ã–∑!'],
    ["Click [here](https://qolkanat.tilda.ws/kz) to visit official site!"],
    ['Please wait, your request is in process...'],
    ['eng']
]

kaz_texts = [
['/k –ö”©–º–µ–∫‚õëÔ∏è', '/g –≥—Ä–∞—Ñ–∏–∫_–∞–ª—Éüìä', '/q “õ–æ—Å—ã–º—à–∞‚öôÔ∏è', '/t —Ç—ñ–ªüá∞üáø/üá∫üá≤'],
['/kr –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω', '/mo –º–æ—á–µ–≤–∏–Ω–∞', '/za –∂–∞–ª–ø—ã_–∞“õ—É—ã–∑', '/rbc “õ—ã–∑—ã–ª_“õ–∞–Ω_–∫–ª–µ—Ç–∫–∞—Å—ã', '/hm –≥–µ–º–æ–≥–ª–æ–±–∏–Ω','/tr —Ç—Ä–æ–º–±–æ—Ü–∏—Ç', '/zhh –∂–∞–ª–ø—ã_—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω','/kgl “õ–∞–Ω–¥–∞“ì—ã_–≥–ª—é–∫–æ–∑–∞', '/n –∫–µ—Ä—ñ_–∫”©—à—Éüîô'],
['/ChatGPTüëæ', '/s —Å–∞–π—Çüåê', '/d ”©—à—ñ—Ä—É_–±–∞“ì–¥–∞—Ä–ª–∞–º–∞—Å—ãüóëÔ∏è', '/n –∫–µ—Ä—ñ_–∫”©—à—Éüîô'],
['/y –ò”ô‚úÖ', '/n –∫–µ—Ä—ñ_–∫”©—à—É‚ùå'],
['''–°”ô–ª–µ–º, –º–µ–Ω Qolqanat, –º–µ–Ω —Å—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω! –ú–∞“ì–∞–Ω –º–µ–¥–∏—Ü–∏–Ω–∞–ª—ã“õ —Å—ã–Ω–∞“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ –±–∞—Ä PDF —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.'''],
['''–°—ñ–∑ üññ–≥—Ä–∞—Ñ–∏–∫—Ç—ñüìä –∞–ª—É –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—Ç—ã“£—ã–∑. –ù–µ–Ω—ñ –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑üòÅ :'''],
['–ë–∞—Å—Ç—ã –º–µ–Ω—é'],
['—Ñ–∞–π–ª:', '–∂“Ø–∫—Ç–µ–ª–≥–µ–Ω'],
['–î–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ! –¢–µ–∫ —Å—ñ–∑ –º–µ–Ω—ñ–º–µ–Ω PDF —Ñ–∞–π–ª–¥–∞—Ä–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!'],
["""$ /get_graph —Å—ã–Ω–∞“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω—ñ“£ –≥—Ä–∞—Ñ–∏–∫—Ç–µ—Ä—ñ.
    /extra –ú“±–Ω–¥–∞ —Å—ñ–∑ “Ø—à –Ω–µ–≥—ñ–∑–≥—ñ —Ç“Ø–π–º–µ–Ω—ñ –∫”©—Ä–µ –∞–ª–∞—Å—ã–∑.
    /ChatGPT —Å—ñ–∑–≥–µ ChatGPT —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∂—ñ–±–µ—Ä–µ–¥—ñ
    /—Å–∞–π—Ç —Å—ñ–∑–≥–µ –±—ñ–∑–¥—ñ“£ —Ä–µ—Å–º–∏ —Å–∞–π—Ç—ã–º—ã–∑“ì–∞ —Å—ñ–ª—Ç–µ–º–µ –∂—ñ–±–µ—Ä–µ–¥—ñ.
    /delete_db –¥–µ—Ä–µ–∫“õ–æ—Ä–¥–∞“ì—ã –±–∞—Ä–ª—ã“õ –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ –∂–æ—è–¥—ã
    –ì—Ä–∞—Ñ–∏–∫—Ç–µ—Ä–¥—ñ –∞–ª—É “Ø—à—ñ–Ω PDF —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑"""],
['“ö–æ—Å—ã–º—à–∞ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä: '],
['–°—ñ–∑ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?: '],
['–î–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ–π—ã–ª–¥—ã!'],
['–°—ñ–ª—Ç–µ–º–µ –∞—à—É “Ø—à—ñ–Ω [–æ—Å—ã–Ω–¥–∞](https://platform.openai.com/playground) –±–∞—Å—ã“£—ã–∑!'],
["–†–µ—Å–º–∏ —Å–∞–π—Ç“õ–∞ –∫—ñ—Ä—É “Ø—à—ñ–Ω [–º—ã–Ω–∞ –∂–µ—Ä–¥—ñ](https://qolkanat.tilda.ws/kz) –±–∞—Å—ã“£—ã–∑!"],
['–ö“Ø—Ç–µ —Ç“±—Ä—ã“£—ã–∑, —Å“±—Ä–∞—É—ã“£—ã–∑ –æ—Ä—ã–Ω–¥–∞–ª—É–¥–∞...'],
['kz']
]



language = eng_texts

main_keyboard = [[KeyboardButton(text=language[0][0]), KeyboardButton(text=language[0][1])],
                    [KeyboardButton(text=language[0][2]), KeyboardButton(text=language[0][3])]]
main_markup = ReplyKeyboardMarkup(keyboard=main_keyboard)

graph_keyboard = [[KeyboardButton(text=language[1][0]), KeyboardButton(text=language[1][1])],
                        [KeyboardButton(text=language[1][2]),KeyboardButton(text=language[1][3])],
                        [KeyboardButton(text=language[1][4]), KeyboardButton(text=language[1][5])],
                        [KeyboardButton(text=language[1][6]), KeyboardButton(text=language[1][7])],
                        [KeyboardButton(text=language[1][8])]]
graph_markup = ReplyKeyboardMarkup(keyboard=graph_keyboard, resize_keyboard=True)


extra_keyboard = [[KeyboardButton(text=language[2][0]), KeyboardButton(text=language[2][1])],
                        [KeyboardButton(text=language[2][2]), KeyboardButton(text=language[2][3])]]
extra_markup = ReplyKeyboardMarkup(keyboard=extra_keyboard)

delete_keyboard = [[KeyboardButton(text=language[3][0]), KeyboardButton(text=language[3][1])]]
delete_markup = ReplyKeyboardMarkup(keyboard=delete_keyboard)

language_keyboard = [[KeyboardButton(text='üá∫üá∏'), KeyboardButton(text='üá∞üáø')]]
language_markup = ReplyKeyboardMarkup(keyboard=language_keyboard)
# try except

while True:
    
    def markup_maker(type='main', lan=eng_texts):
        language = lan
        if type == 'main':
            main_keyboard = [[KeyboardButton(text=language[0][0]), KeyboardButton(text=language[0][1])],
                    [KeyboardButton(text=language[0][2]), KeyboardButton(text=language[0][3])]]
            main_markup = ReplyKeyboardMarkup(keyboard=main_keyboard)
            return main_markup
        
        elif type == 'graph':
            graph_keyboard = [[KeyboardButton(text=language[1][0]), KeyboardButton(text=language[1][1])],
                            [KeyboardButton(text=language[1][2]),KeyboardButton(text=language[1][3])],
                            [KeyboardButton(text=language[1][4]), KeyboardButton(text=language[1][5])],
                            [KeyboardButton(text=language[1][6]), KeyboardButton(text=language[1][7])],
                            [KeyboardButton(text=language[1][8])]]
            graph_markup = ReplyKeyboardMarkup(keyboard=graph_keyboard)
            return graph_markup
        
        elif type == 'extra':
            extra_keyboard = [[KeyboardButton(text=language[2][0]), KeyboardButton(text=language[2][1])],
                            [KeyboardButton(text=language[2][2]), KeyboardButton(text=language[2][3])]]
            extra_markup = ReplyKeyboardMarkup(keyboard=extra_keyboard)
            return extra_markup
        
        elif type == 'del':
            delete_keyboard = [[KeyboardButton(text=language[3][0]), KeyboardButton(text=language[3][1])]]
            delete_markup = ReplyKeyboardMarkup(keyboard=delete_keyboard)
            return delete_markup

        elif type == 'language':
            language_keyboard = [[KeyboardButton(text='üá∫üá∏'), KeyboardButton(text='üá∞üáø')]]
            language_markup = ReplyKeyboardMarkup(keyboard=language_keyboard)
            return language_markup

 
    
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        print(language)
        #main_markup = markup_maker('main', lan=language)
        await context.bot.send_message(chat_id=context._chat_id, text=language[4][0], 
                                       reply_markup=markup_maker('language', lan=language))


    async def get_graph(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #graph_markup =  markup_maker('graph', language)
        await context.bot.send_message(chat_id=context._chat_id, text=language[5][0], 
                                       reply_markup=markup_maker('graph', lan=language))


    async def back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker(language)
        await context.bot.send_message(chat_id=context._chat_id, text=language[6][0], 
                                       reply_markup=markup_maker('main', language))


    async def get_doc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        print('im working right now get_doc')
        try:
            if type(update.message.document.file_id) == str:
                file_id = update.message.document.file_id
                new_file = await context.bot.get_file(file_id=file_id)
                download_path = os.path.join('trash', update.message.document.file_name)
                await new_file.download_to_drive(download_path)
                Data_manager(download_path, username=update.effective_user.username).run()
                print(context._user_id)
                file_for_delete = os.path.join('trash', update.message.document.file_name)
                os.remove(file_for_delete)
                await context.bot.send_message(chat_id=context._chat_id, 
                                               text=f"{language[7][0]}{update.message.document.file_name} {language[7][1]}")
        except:
            pass

    async def creatinine(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω_{username}.png'):
            os.remove(f'–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω_{username}.png')
        chat_gpt_opinion = Graphic_builder('–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–ö—Ä–µ–∞—Ç–∏–Ω–∏–Ω_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))


    async def total_protein(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–û–±—â–∏–π –±–µ–ª–æ–∫_{username}.png'):
            os.remove(f'–û–±—â–∏–π –±–µ–ª–æ–∫_{username}.png')
        chat_gpt_opinion = Graphic_builder('–û–±—â–∏–π –±–µ–ª–æ–∫', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–û–±—â–∏–π –±–µ–ª–æ–∫_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–û–±—â–∏–π –±–µ–ª–æ–∫_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))

    async def urea_nitrogen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–ú–æ—á–µ–≤–∏–Ω–∞_{username}.png'):
            os.remove(f'–ú–æ—á–µ–≤–∏–Ω–∞_{username}.png')
        chat_gpt_opinion = Graphic_builder('–ú–æ—á–µ–≤–∏–Ω–∞', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–ú–æ—á–µ–≤–∏–Ω–∞_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–ú–æ—á–µ–≤–∏–Ω–∞_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))
        
    
    async def red_blood_cell(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã_{username}.png'):
            os.remove(f'–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã_{username}.png')
        chat_gpt_opinion = Graphic_builder('—ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–≠—Ä–∏—Ç—Ä–æ—Ü–∏—Ç—ã_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))


    async def hemoglobin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–ì–µ–º–æ–≥–ª–æ–±–∏–Ω_{username}.png'):
            os.remove(f'–ì–µ–º–æ–≥–ª–æ–±–∏–Ω_{username}.png')
        chat_gpt_opinion = Graphic_builder('–ì–µ–º–æ–≥–ª–æ–±–∏–Ω', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–ì–µ–º–æ–≥–ª–æ–±–∏–Ω_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–ì–µ–º–æ–≥–ª–æ–±–∏–Ω_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))


    async def thrombocytes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã_{username}.png'):
            os.remove(f'–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã_{username}.png')
        chat_gpt_opinion = Graphic_builder('–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))
            

    async def total_cholesterol(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω_{username}.png'):
            os.remove(f'–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω_{username}.png')
        chat_gpt_opinion = Graphic_builder('–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))
            

    async def blood_glucose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        username = update._effective_user.username
        if os.path.isfile(f'–ì–ª—é–∫–æ–∑–∞_{username}.png'):
            os.remove(f'–ì–ª—é–∫–æ–∑–∞_{username}.png')
        chat_gpt_opinion = Graphic_builder('–ì–ª—é–∫–æ–∑–∞', username=username, lan=language[16][0]).run()
        await context.bot.send_message(chat_id=context._chat_id, text=language[15][0])
        if os.path.isfile(f'–ì–ª—é–∫–æ–∑–∞_{username}.png'):
            await context.bot.send_document(chat_id=context._chat_id, document=f'–ì–ª—é–∫–æ–∑–∞_{username}.png')
            await context.bot.send_message(chat_id=context._chat_id, text=chat_gpt_opinion)
        else:
            await context.bot.send_message(chat_id=context._chat_id, 
                                           text=language[8][0], reply_markup=markup_maker('main', language))
            

    async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        text = language[9][0]
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text=text, reply_markup=markup_maker('main', language))


    async def extra(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker(language)
        text = language[10][0]
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text=text, reply_markup=markup_maker('extra', language))


    async def delete_db(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text=language[11][0], reply_markup=markup_maker('del', language))


    async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        Data_manager(filename=None, username=update.effective_user.username).delete_table()
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text=language[12][0], reply_markup=markup_maker('main', language))


    async def ChatGPT(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker()
        message_text = language[13][0]
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text=message_text, reply_markup=markup_maker('main', language))


    async def site(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker(language)
        message_text = language[14][0]
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text=message_text, reply_markup=markup_maker('main', language))


    async def language_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        #markup_maker(language)
        await context.bot.send_message(chat_id=context._chat_id, 
                                       text='Language/—Ç—ñ–ª', reply_markup=markup_maker('language', language))

    async def mess_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        global language  # Use the global variable language
        try:
            if type(update.message.document.file_id) == str:
                file_id = update.message.document.file_id
                new_file = await context.bot.get_file(file_id=file_id)
                download_path = os.path.join('', update.message.document.file_name)
                await new_file.download_to_drive(download_path)
                Data_manager(download_path, username=update.effective_user.username).run()
                print(context._user_id)
                file_for_delete = os.path.join('', update.message.document.file_name)
                os.remove(file_for_delete)
                await context.bot.send_message(chat_id=context._chat_id, 
                    text=f"{language[7][0]}{update.message.document.file_name} {language[7][1]}")
        except:
            print('can not download doc')

        #global language  # Use the global variable language
        if update.message.text == None:
            print('it is no text')
        else:
            if 'üá∞üáø' in update.message.text:
                language = kaz_texts
                #markup_maker('language', lan=language)
                print(language)
                await context.bot.send_message(chat_id=update.message.chat_id, 
                                               text='“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ –∞—É—ã—Å—Ç—ã—Ä—ã–ª–¥—ã!', 
                                               reply_markup=markup_maker('main', language))
                
            elif 'üá∫üá∏' in update.message.text:
                language = eng_texts
                await context.bot.send_message(chat_id=update.message.chat_id, 
                                               text='Language switched to English!', 
                                               reply_markup=markup_maker('main', language))



    app = ApplicationBuilder().token('6358744092:AAF8Snr3NiV27Ke4ytSn6KTILUAdcBWZbxw').build()

    app.add_handler(CommandHandler('language', language_bot))
    app.add_handler(CommandHandler('t', language_bot))
    ###########################
    app.add_handler(CommandHandler('start', start))
    ############################
    app.add_handler(CommandHandler('help', help))
    app.add_handler(CommandHandler('k', help))
    ############################
    app.add_handler(CommandHandler('extra', extra))
    app.add_handler(CommandHandler('q', extra))
    ############################
    app.add_handler(CommandHandler('ChatGPT', ChatGPT))
    ###########################
    app.add_handler(CommandHandler('YES', delete))
    app.add_handler(CommandHandler('y', delete))
    ############################
    app.add_handler(CommandHandler('delete_db', delete_db))
    app.add_handler(CommandHandler('d', delete_db))
    ##############################
    app.add_handler(CommandHandler('get_graph', get_graph))
    app.add_handler(CommandHandler('g', get_graph))
    ##############################
    app.add_handler(CommandHandler('site', site))
    app.add_handler(CommandHandler('s', site))
    ##############################
    app.add_handler(CommandHandler('back', back))
    app.add_handler(CommandHandler('n', back))
    #############################
    app.add_handler(CommandHandler('creatinine', creatinine))
    app.add_handler(CommandHandler('kr', creatinine))
    #############################
    app.add_handler(CommandHandler('total_protein', total_protein))
    app.add_handler(CommandHandler('za', total_protein))
    ##############################
    app.add_handler(CommandHandler('urea_nitrogen', urea_nitrogen))
    app.add_handler(CommandHandler('mo', urea_nitrogen))
    ##############################
    app.add_handler(CommandHandler('red_blood_cell', red_blood_cell))
    app.add_handler(CommandHandler('rbc', red_blood_cell))
    ##############################
    app.add_handler(CommandHandler('hemoglobin', hemoglobin))
    app.add_handler(CommandHandler('hm', hemoglobin))
    ##############################
    app.add_handler(CommandHandler('thrombocytes', thrombocytes))
    app.add_handler(CommandHandler('tr', thrombocytes))
    ##############################
    app.add_handler(CommandHandler('total_cholesterol', total_cholesterol))
    app.add_handler(CommandHandler('zhh', total_cholesterol))
    ##############################
    app.add_handler(CommandHandler('blood_glucose', blood_glucose))
    app.add_handler(CommandHandler('kgl', blood_glucose))


    app.add_handler(MessageHandler(filters=filters.ALL, callback=mess_process))
   




    app.run_polling()